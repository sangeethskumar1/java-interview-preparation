How Spring Boot Works. Explain AutoConfiguration
    Spring Boot simplifies the setup, configuration & run of Spring Applications
    Spring Boot Starters
        These are accumulated dependencies for a spring boot application.
    Embedded Servers
        Spring Boot Application come with an embedded server like Tomcat. We don't have to deploy our application on an external server.
    Convention over Configuration
        This means it provides sensible defaults for most configuration settings, reducing the need to configure your application explicitly
    Spring Boot CLI
        A command-line tool that you can use to quickly prototype with spring.
    Spring Boot Actuators
        Provides production-ready features like monitoring, metrics, and health checks, which are integrated into your application with minimal setup
    AutoConfiguration
        It is one of the key features that make Spring Boot so powerful. It aims to automatically configure your Spring application based on the dependencies and settings present on the classpath
        @EnableAutoConfiguration Annotation
            This annotation is typically placed on your main application class. It tells Spring Boot to start adding beans based on classpath settings, other beans, and various property settings
            The @SpringBootApplication annotation is a combination of @EnableAutoConfiguration, @ComponentScan, and @Configuration

Is it mandatory to add @Repository Annotation in Spring Boot Repository Class.? Will it work with @Component
    No. @Component can also be used instead, but it will lose advantages specific to @Repository. Recommended to use @Repository tag since
        Semantics: @Repository indicate that a class is DAO class.
        Exception Translation: It automatically provides translation of database-specific exceptions into Spring's DataAccessException hierarchy.

What are Stereotype Annotations ?
    Stereotype annotations indicate that the class is managed by spring container. Its part of Spring Component Scan mechanism.
    All Stereotype Annotations are subtype of @Component.
    @Component
    @Service
    @Repository
    @Controller
    @RestController

What is the difference between @Bean & @Component
    They have different purposed
    @Bean
        Comes under @Configuration class to define beans
        Applies to methods within @Configuration class
        Used for defining beans programmatically with more control over their instantiation, configuration, and initialization
    @Component
        Mark a class as a Spring-managed component and for automatic detection and configuration during component scanning
        Applied directly to class definitions
    Key Differences
        Location: @Bean is applied to methods in configuration classes, while @Component is applied to classes.
        Discovery: @Bean requires explicit declaration, whereas @Component is automatically detected through classpath scanning.
        Usage: @Bean gives more fine-grained control over the bean creation process, whereas @Component simplifies bean registration.

What is Spring Application Context
    The Spring Application Context is a central component of the Spring Framework and serves as a container for beans in a Spring application.
    It manages the lifecycle and configuration of application components (beans) and provides essential features for dependency injection, event propagation, and resource management
    Bean Factory
        It extends the BeanFactory interface, providing a complete framework for configuring and managing beans
    Dependency Injection
        Automatically injects dependencies into your beans, promoting loose coupling and easier testing
    Configuration Management
        Loads bean definitions from various configuration sources
    Event Handling
        Supports an event-driven model where beans can publish and listen to events. It allows your application components to communicate effectively and asynchronously
    Resource Loading
        Provides a unified way to load resources (like files and URLs) through the ResourceLoader interface
    Internationalization
        Supports message sources for internationalization, making it easier to create multilingual applications
    Application Lifecycle
        Provides hooks for running code at certain points in the application lifecycle, such as initialization and shutdown

Explain Spring Package Scan
    Package scanning is the process where Spring automatically discovers and registers components (beans) within specified packages.
    This helps in minimizing the need for explicit bean definitions in XML or Java configuration
    @ComponentScan Annotation
        This annotation is used on configuration classes to specify the packages that Spring should scan for annotated components
    Component Stereotypes
        Spring looks for classes annotated with @Component, @Service, @Repository, @Controller, or any custom annotation that is itself annotated with @Component
    Configuration Methods
        During the scanning process, Spring automatically registers these components as beans in the application context, making them available for dependency injection

API Gateway
    Crucial Component in moden applications especially for microservices
    Single entry point for all client requests to backend services

    Request Routing
        Directs incoming requests to appropriate backend service based on request path, method, headers etc.
    Authentication & Authorization
        Ensures only Authenticated & Authorized requests are allowed through to the backend services.
    Rate Limiting
        Controls the no of request that the client can make in a given time period to prevent overloading the backend.
    Request and Response Transformation
        Modifies Request & Response as they pass through the API Gateway. Adding Headers, Changing request body etc.
    Monitoring & Logging
        Track & Log API Usage, Performance Metrics and errors to help with debugging & monitoring

API Security.
    API Security is the practice of protecting APIs from attacks and ensuring that they function as intended without exposing sensitive data or services to unauthorized users

    Best Practices for API Security
    Authentication and Authorization
        Use strong authentication methods like OAuth 2.0, API keys, and JWT tokens to ensure only authorized users can access the API2.
    Encryption
        Implement TLS/SSL to encrypt data in transit, ensuring that sensitive information is not exposed.
    Rate Limiting.
        Limit the number of requests a client can make in a given time period to prevent abuse and DoS attacks.
    Input Validation
        Validate all inputs to prevent injection attacks and ensure data integrity.
    API Gateway
        Use an API Gateway to centralize security features like rate limiting, authentication, and logging.
    Monitoring and Logging
        Keep detailed logs of API activity and monitor for unusual patterns that might indicate an attack.
    Error Handling
        Ensure that error messages do not expose sensitive information about the API or its backend systems.

Spring Security
	Powerful & Highly Customizable Authentication & Authorization framework for java applications provided by spring.
	Authentication and Authorization
		Provides comprehensive support for both authentication (verifying user identity) and authorization (controlling access to resources).
	Protection Against Common Attacks
		Includes built-in protection against common security threats such as CSRF (Cross-Site Request Forgery), XSS (Cross-Site Scripting), and session fixation.
	Integration with Spring Framework
		Seamlessly integrates with other Spring projects like Spring Boot, making it easier to secure applications.
	Use Spring Starter Security Dependency in Spring Boot Applications
	Configure Security Settings using Configuration Class

JSON Web Token - JWT
    Compact URL safe method of representing claims to be transferred between two parties
    Used for authentication & information exchange in web applications

    JWT has 3 Parts
    Header
        Contains metadata about the token. Token Type, Signing algorithm etc
    Payload
        Contains the claims which are details about the entity.
        Registered Claims
            Predefined claims such as Issuer, Expiration Time, Subject & Audience
        Public Claims
            Custom claims that can be developed by user
        Private Claims
            Custom claims that are intended to be shared between parties that agree on using them
    Signature
        Verify that the sender of the JWT is who it says it is and ensure that the message wasn't changed along the way
        The signature is created by encoding the header and payload using Base64url encoding and then signing that string using the algorithm specified in the header

    Working of JWT
    Authentication
        When a user logs in, the server creates a JWT and send it to client.
        Client store the JWT and includes it in Authorization header of subsequent requests
    Authorization
        The server verifies the JWT on each request and ensure that the user is authenticated and authorized to access the data

Open Authorization - OAuth
    Open Standard Protocol for authorization of an application in using user information.
    Allows 3rd party application to access user information without providing the 3rd party app with user credentials
    eg: Login with Google, Import Data from LinkedIn etc

    Parts of OAuth
    Resource Owner
        The user who owns the data and can grant access to it
    Client
        The application requesting access to the user's resources
    Authorization Server
        The server that authenticates the user and issues access tokens to the client
    Resource Server
        The server hosting the protected resources, which accepts and validates access tokens

    OAuth Flow
    Authorization Request
        Client requests authorization from the resource owner via the authorization server
    Authorization Grant
        The resource owner provides grants authorization typically through a consent
    Access Token Request
        The Client requests an access token from the authorization server using the authorization grant
    Access Token Response
        The authorization server issues an access token as response to the client
    Resource Request
        The client request for resources from the resource server using the access token
    Resource Response
        The Resource server validates the token and returns the requested resources

Grant Types
	Authorization Code Grant
		Best for web and mobile apps, high security
	Implicit Grant
		Suitable for SPAs, but less secure
	Resource Owner Password Credentials Grant
		Simple but requires high trust
	Client Credentials Grant
		Ideal for server-to-server communication
	Device Authorization Grant
		Great for devices with limited input
	Refresh Token Grant
		Useful for maintaining long-lived sessions

Basic Authentication.
	Basic Authentication is a simple and widely used method for enforcing access controls to web resources.
	It involves sending a username and password with each HTTP request, encoded in Base64
	Client Request
		The client sends a request to the server.
	Server Response
		The server responds with a 401 Unauthorized status and a WWW-Authenticate header indicating that Basic Authentication is required.
	Client Credentials
		The client resends the request with an Authorization header containing the credentials encoded in Base64
	Best Practices
		Always use HTTPS
		Use Strong Password
		Implement Additional Security Measures such as MFA

Spring Cloud
    Framework that provides tools for developers to quickly build some of the common patterns in distributed systems.
    Configuration Management, Service Discovery, Circuit Breakers, Intelligent Routing etc

Sticky Sessions.
    Sticky sessions, also known as session persistence or session affinity
    It is a technique used in load balancing to ensure that a user's requests are always directed to the same server during a session
    This approach helps maintain session state and provides a consistent user experience
    Usually achived using cookies or IP Address mapping

    Benefits
        Simplicity
        Consistency
        Performance

    Draw Backs
        Scalability Issues
        Reliability Issues

Redis
    Remote Dictionary Server is an open-source in-memory data structure store used as database or cache.
    It provides high performance, flexibility and extensive support

    In-Memory
        Stores data in memory, which allows for extremely fast read and write operations.
        Low Latency Data Read
    Data Structure
        Supports variety of data structures including String, List, Set etc
    Persistence
        Can persist data to disk rather than in-memory
    High Availability
        Supports Master Slave replication, allowing redis to replicate data to any no of replicas

Microservice Communication
    Microservices Communicate synchronously and asynchronously.

    Synchronous
        Direct communication between servers usually via RESTful API's
        Simple to implement and understand. Widely used.
        Lead to tight coupling between services.
        Potential bottleneck if response is delayed.
    Asynchronous
        Communicate without waiting for immediate response.
        Typically achived via Rabbitmq, Kafka etc
        Decouple services. Can handle high load efficiently
        More complex to implement. Can have message loss or duplication

    Communication Patterns
        Request-Response
            Service sends a request and waits for response
        Publish-Subscribe
            Service publishes message to a topic and multiple consumer subscribed to topic receives the data
        Event Driven
            Services emit events and other services responds to the events
        Message Queue
            Messages are placed in queue and one or more consumers process the same

Microservices Design Patterns
    API Gateway Pattern
        Used in microservices architecture to manage and route requests to various microservices
        It acts as a single entry point for all client interactions with a system of microservices, providing a unified interface
    Database Per Service Pattern
        Each service has its own database for storing its data		Prevent single point of failure		Services can use either SQL or NoSQL databases
    Circuit Breaker Pattern
        Prevents service failure by providing a fallback mechanism when a service is unreachable or fails
        Continuously monitor 3rd party communication and breaks circuit when failure exceeds threshold
    Service Discovery Pattern
        Allows microservices to find and communicate with each other dynamically
        It involves a service registry where services register themselves and look up other services
    CQRS
        Command Query Responsibility Segregation
        Command - Write
        Query - Read
        Command updates the state and Query reads from replicas optimized for reads.
        Read Replica of AWS
    Saga Pattern
        Saga manages distributed transactions across multiple microservices by coordinating a sequence of local transactions
        Each service performs its transaction and publishes an event triggering the next service’s transaction
        If a transaction fails, compensating transactions undo the changes
    Strangler Fig Pattern
        This pattern incrementally replaces a legacy system with a microservices architecture
        The new system gradually takes over the functionality of the old system until the legacy system is entirely replaced
    Bulkhead Pattern
        Bulkhead isolates different parts of a system to prevent failure in one component from affecting others
    Sidecar Pattern
        The Sidecar pattern deploys helper components (sidecars) alongside the main microservices.
        These sidecars handle cross-cutting concerns like logging, monitoring, and configuration management, allowing the main services to focus on business logic

