1.  What are the new features introduced in Java 11
        Local-Variable Type Inference (var):    Introduced the var keyword to infer the type of local variables automatically
        HTTP Client API:                        A new API for making HTTP requests, replacing the older HttpURLConnection
        Enhanced Performance:                   Various performance improvements, including enhancements to the G1 Garbage Collector
        Removed Features:                       Deprecated and removed features like the Applet support, Nashorn JavaScript Engine(came with java8)

2.  What are the new features introduced in Java 17
        Enhanced Performance:                   Various performance improvements, including enhancements to the G1 Garbage Collector and the introduction of the Shenandoah Garbage Collector
        New Features:                           Records

3.  What Are Records in java
        Records are a special kind of class in Java designed to hold immutable data
        They automatically provide implementations for common methods such as equals(), hashCode(), and toString()
        This helps in reducing boilerplate code for simple data carrier classes

4.  What is the use of Optional class even though we have to use Optional.isPresent() in our use cases
        Expresses Intent:                       Using Optional clearly expresses the possibility of a value being absent, making the code more readable and understandable. When a method returns an Optional, it indicates that the return value might be empty, and the caller should handle it appropriately
        Reduces Null Pointer Exceptions:        Optional provides methods to handle the absence of values without resorting to null checks. This can help avoid NullPointerException, which is a common source of runtime errors in Java.
        Provides Fluent API:                    Optional offers a set of functional-style methods that can make code more concise and expressive:
                                                isPresent(): Checks if a value is present.
                                                ifPresent(): Executes a callback if a value is present
                                                orElse(): Returns a default value if the value is absent
                                                orElseGet(): Returns a value from a Supplier if the value is absent
                                                orElseThrow(): Throws an exception if the value is absent
                                                map(): Transforms the value if present
                                                flatMap(): Transforms the value and flattens the result

5.  What is Functional Interface ? What is the use of Functional Interface
6.  How Spring Boot Works. Explain AutoConfiguration
7.  Is it mandatory to add @Repository Annotation in Spring Boot Repository Class.? Will it work with @Component
8.  What are Stereotype Annotations
9.  What is Spring Application Context
10. Explain Spring Package Scan
11.