What are the new features introduced in Java 11
    Local-Variable Type Inference (var):    Introduced the var keyword to infer the type of local variables automatically
    HTTP Client API:                        A new API for making HTTP requests, replacing the older HttpURLConnection
    Enhanced Performance:                   Various performance improvements, including enhancements to the G1 Garbage Collector
    Removed Features:                       Deprecated and removed features like the Applet support, Nashorn JavaScript Engine(came with java8)

What are the new features introduced in Java 17
    Enhanced Performance:                   Various performance improvements, including enhancements to the G1 Garbage Collector and the introduction of the Shenandoah Garbage Collector
    New Features:                           Records

What Are Records in java
    Records are a special kind of class in Java designed to hold immutable data
    They automatically provide implementations for common methods such as equals(), hashCode(), and toString()
    This helps in reducing boilerplate code for simple data carrier classes

What is the use of Optional class even though we have to use Optional.isPresent() in our use cases
    Expresses Intent:                       Using Optional clearly expresses the possibility of a value being absent, making the code more readable and understandable.
                                               When a method returns an Optional, it indicates that the return value might be empty, and the caller should handle it appropriately
    Reduces Null Pointer Exceptions:        Optional provides methods to handle the absence of values without resorting to null checks.
                                            This can help avoid NullPointerException, which is a common source of runtime errors in Java.
    Provides Fluent API:                    Optional offers a set of functional-style methods that can make code more concise and expressive:
                                            isPresent(): Checks if a value is present.
                                            ifPresent(): Executes a callback if a value is present
                                            orElse(): Returns a default value if the value is absent
                                            orElseGet(): Returns a value from a Supplier if the value is absent
                                            orElseThrow(): Throws an exception if the value is absent
                                            map(): Transforms the value if present
                                            flatMap(): Transforms the value and flattens the result

What is Functional Interface ? What is the use of Functional Interface

Explain SOLID Principles
    Single Responsibility Principle
        A class must have only one responsibility
    Open Close Principle
        Classes/ Functions must be Open for Extension & Closed for Modification
    Liskov's Substitution Principle
        Superclass objects should be replaceable with child class objects without affecting correctness of program
    Interface Segregation Principle
        Clients should not be forced to implement interfaces that are not required
    Dependency Inversion Principle
        High level modules and low level modules should depend on Abstractions

Explain OOPS Concepts
    Class
        It is the blueprint or template for creating objects
    Object
        Instance of a class
    Abstraction
        Hiding the internal functionality and exposing only the required functionality
    Encapsulation
        Wrapping up of Data Variables and methods into object. It restricts direct access to object components
    Inheritance
        Child class can inherit the properties of parent class
    Polymorphism
        Can have multiple implementations.

What are the uses of using Interfaces
    Standardization
        Interfaces declare methods that needs to be implemented by any implementing classes. Thus making sure that all have the same contract
    Loose Coupling
        We can reduce dependencies between concrete implementations of code
        System gets more modular, easier to test & flexible for changes
    Multiple Implementations
        A class can implement multiple implementations
    Dependency Injection
        When injecting dependencies, when using interface, we can inject diff impl at runtime

Shallow Copy Vs Deep Copy
    References
        Shallow Copy
            Copies only the references, so changes to the referenced objects in the copy will affect the original
        Deep Copy
            Copies the objects themselves, creating entirely new instances. Changes to the copied objects do not affect the original
    Memory Usage
        Shallow Copy
            Less memory intensive, as it shares the same references
        Deep Copy
            More memory intensive, as it duplicates all referenced objects
    Performance
        Shallow Copy
            Faster to create, as it only copies references.
        Deep Copy
            Slower to create, as it duplicates all objects and their contents